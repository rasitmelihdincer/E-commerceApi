// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SessionType {
  ADMIN
  CUSTOMER
}

model Session {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  adminId    Int?
  customerId Int?
  admin      Admin?    @relation(fields: [adminId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
}

model Customer {
  id             Int       @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String    @unique
  hashedPassword String
  createAt       DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  addresses      Address[]
  carts          Cart[]
  Session        Session[]
  Email          Email[]
}

model Admin {
  id             Int       @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String    @unique
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
}

model Address {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  country    String
  city       String
  district   String
  street     String
  postcode   String
  createAt   DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Cart {
  id         Int        @id @default(autoincrement())
  customerId Int
  addressId  Int
  customer   Customer   @relation(fields: [customerId], references: [id])
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
}

model Product {
  id                 Int            @id @default(autoincrement())
  productName        String         @unique
  productDescription String
  productCategoryId  Int
  productCategory    Category?      @relation(fields: [productCategoryId], references: [id])
  productStock       Int            @default(0)
  price              Decimal        @default(0.0)
  cartItems          CartItem[]
  orderItems         OrderItem[]
  images             ProductImage[]
  createAt           DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parentId Int?
  parent   Category?  @relation(name: "CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation(name: "CategoryParent")
  products Product[]
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  addressId  Int
  status     String      @default("PENDING")
  totalPrice Decimal     @default(0.0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  orderItems OrderItem[]
  payment    Payment[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)
  price     Decimal  @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id])
  status        String
  amount        Decimal  @default(0.0)
  currency      String   @default("TRY")
  installments  Int      @default(1)
  paybullData   Json?
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Email {
  id         Int       @id @default(autoincrement())
  subject    String
  content    String    @db.Text
  recipient  String
  status     String    @default("SENT")
  type       String
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([customerId])
}
